name: Issue Automation

# IMPORTANT: To make this workflow work with GitHub Projects:
# 1. Create a Personal Access Token (PAT) at https://github.com/settings/tokens/new
# 2. Select scopes: 'project' (required), 'repo' (for private repos)
# 3. Add the token to your repository secrets as 'ADD_TO_PROJECT_PAT'
#    Settings → Secrets and variables → Actions → New repository secret
# 4. The default GITHUB_TOKEN cannot access projects, you MUST use a PAT

on:
  issues:
    types: [opened]

permissions:
  issues: write
  repository-projects: write

jobs:
  assign-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Assign Milestone
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;

            // Get all open milestones
            const milestones = await github.rest.issues.listMilestones({
              owner: issue.owner,
              repo: issue.repo,
              state: 'open',
              sort: 'due_on',
              direction: 'asc'
            });

            if (milestones.data.length === 0) {
              console.log("No open milestones found");
              return;
            }

            // Find the current milestone based on different strategies
            const today = new Date();
            let targetMilestone = null;

            // Strategy 1: Find milestone that is currently in progress (due date in future, closest to today)
            const futureMilestones = milestones.data.filter(m => {
              if (!m.due_on) return false;
              return new Date(m.due_on) >= today;
            });

            if (futureMilestones.length > 0) {
              // Get the milestone with the closest due date
              targetMilestone = futureMilestones[0];
              console.log(`Found current milestone by due date: '${targetMilestone.title}' (due ${targetMilestone.due_on})`);
            } else {
              // Strategy 2: If no future milestones, use the one with most recent due date
              const pastMilestones = milestones.data.filter(m => m.due_on);
              if (pastMilestones.length > 0) {
                targetMilestone = pastMilestones[pastMilestones.length - 1];
                console.log(`Using most recent milestone: '${targetMilestone.title}'`);
              } else {
                // Strategy 3: If no milestones have due dates, use the first open one
                targetMilestone = milestones.data[0];
                console.log(`Using first open milestone: '${targetMilestone.title}'`);
              }
            }

            if (targetMilestone) {
              // Assign the milestone to the issue
              await github.rest.issues.update({
                owner: issue.owner,
                repo: issue.repo,
                issue_number: issue.number,
                milestone: targetMilestone.number
              });
              console.log(`Assigned milestone '${targetMilestone.title}' to issue #${issue.number}`);
            } else {
              console.log("Could not determine current milestone");
            }

      - name: Find and Add to Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADD_TO_PROJECT_PAT || secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.issue;
            const projectOwner = issue.owner;
            const repoName = issue.repo;

            try {
              // Get the issue's node_id
              const issueData = await github.rest.issues.get({
                owner: issue.owner,
                repo: issue.repo,
                issue_number: issue.number
              });

              const issueNodeId = issueData.data.node_id;
              console.log(`Issue #${issue.number} node_id: ${issueNodeId}`);

              // First, find projects - try to match by repository name or use the most recent one
              console.log(`Searching for projects owned by '${projectOwner}'`);

              // Try to fetch projects from both user and organization contexts
              let projects = [];

              try {
                // First try as a user
                const userProjectsResponse = await github.graphql(`
                  query($owner: String!) {
                    user(login: $owner) {
                      projectsV2(first: 20, orderBy: {field: UPDATED_AT, direction: DESC}) {
                        nodes {
                          id
                          title
                          number
                          updatedAt
                        }
                      }
                    }
                  }
                `, {
                  owner: projectOwner
                });

                if (userProjectsResponse.user && userProjectsResponse.user.projectsV2) {
                  projects = userProjectsResponse.user.projectsV2.nodes;
                  console.log(`Found ${projects.length} user projects`);
                }
              } catch (e) {
                console.log("Not a user account, trying as organization...");

                // Try as an organization
                const orgProjectsResponse = await github.graphql(`
                  query($owner: String!) {
                    organization(login: $owner) {
                      projectsV2(first: 20, orderBy: {field: UPDATED_AT, direction: DESC}) {
                        nodes {
                          id
                          title
                          number
                          updatedAt
                        }
                      }
                    }
                  }
                `, {
                  owner: projectOwner
                });

                if (orgProjectsResponse.organization && orgProjectsResponse.organization.projectsV2) {
                  projects = orgProjectsResponse.organization.projectsV2.nodes;
                  console.log(`Found ${projects.length} organization projects`);
                }
              }

              if (projects.length === 0) {
                console.log("No projects found for this user");
                return;
              }

              // Strategy 1: Find project that matches the repository name
              let targetProject = projects.find(p =>
                p.title.toLowerCase() === repoName.toLowerCase()
              );

              // Strategy 2: If no exact match, look for project containing repo name
              if (!targetProject) {
                targetProject = projects.find(p =>
                  p.title.toLowerCase().includes(repoName.toLowerCase()) ||
                  repoName.toLowerCase().includes(p.title.toLowerCase())
                );
              }

              // Strategy 3: If still no match, skip project assignment
              if (!targetProject) {
                console.log(`No project matching repository name '${repoName}' found. Skipping project assignment.`);
                console.log(`Available projects: ${projects.map(p => p.title).join(', ')}`);
                return;
              }

              console.log(`Selected project '${targetProject.title}' (number: ${targetProject.number}) for repository '${repoName}'`);

              // Add issue to project
              const addToProjectResponse = await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }
              `, {
                projectId: targetProject.id,
                contentId: issueNodeId
              });

              console.log("Issue added to project successfully");

              // Wait a moment for the project item to be created
              await new Promise(resolve => setTimeout(resolve, 2000));

              // Now get the project fields
              const projectResponse = await github.graphql(`
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                          ... on ProjectV2IterationField {
                            id
                            name
                            configuration {
                              iterations {
                                id
                                title
                                startDate
                                duration
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                projectId: targetProject.id
              });

              const project = projectResponse.node;

              if (!project) {
                console.log("Project not found");
                return;
              }

              console.log(`Found project '${project.title}'`);

              // Get the issue's project item
              const itemResponse = await github.graphql(`
                query($owner: String!, $repo: String!, $issueNumber: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $issueNumber) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                owner: issue.owner,
                repo: issue.repo,
                issueNumber: issue.number
              });

              const projectItem = itemResponse.repository.issue.projectItems.nodes.find(
                item => item.project.id === project.id
              );

              if (!projectItem) {
                console.log("Issue not yet added to project");
                return;
              }

              console.log("Found project item, setting fields...");

              // Find field IDs
              const statusField = project.fields.nodes.find(f => f.name === 'Status');
              const sprintField = project.fields.nodes.find(f => f.name === 'Sprint' || f.name === 'Iteration');
              const startDateField = project.fields.nodes.find(f => f.name === 'Start date' || f.name === 'Start Date');

              // Set Status to 'Todo'
              if (statusField && statusField.options) {
                const todoOption = statusField.options.find(o => o.name === 'Todo');
                if (todoOption) {
                  await github.graphql(`
                    mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                      updateProjectV2ItemFieldValue(input: {
                        projectId: $projectId,
                        itemId: $itemId,
                        fieldId: $fieldId,
                        value: { singleSelectOptionId: $value }
                      }) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                  `, {
                    projectId: project.id,
                    itemId: projectItem.id,
                    fieldId: statusField.id,
                    value: todoOption.id
                  });
                  console.log("Set status to 'Todo'");
                }
              }

              // Set Sprint/Iteration to current sprint
              if (sprintField) {
                if (sprintField.configuration && sprintField.configuration.iterations) {
                  // Find the current sprint based on today's date
                  const today = new Date();
                  const currentSprint = sprintField.configuration.iterations.find(iteration => {
                    if (iteration.startDate && iteration.duration) {
                      const startDate = new Date(iteration.startDate);
                      const endDate = new Date(startDate);
                      endDate.setDate(endDate.getDate() + iteration.duration);
                      return today >= startDate && today <= endDate;
                    }
                    return false;
                  });

                  if (currentSprint) {
                    await github.graphql(`
                      mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: $projectId,
                          itemId: $itemId,
                          fieldId: $fieldId,
                          value: { iterationId: $value }
                        }) {
                          projectV2Item {
                            id
                          }
                        }
                      }
                    `, {
                      projectId: project.id,
                      itemId: projectItem.id,
                      fieldId: sprintField.id,
                      value: currentSprint.id
                    });
                    console.log(`Set iteration to current sprint: '${currentSprint.title}'`);
                  } else {
                    console.log("No current sprint found for today's date");
                  }
                } else if (sprintField.options) {
                  // For single select field, we can't determine "current" so pick the latest numbered sprint
                  const sprintOptions = sprintField.options
                    .filter(o => o.name.startsWith('Sprint '))
                    .sort((a, b) => {
                      const numA = parseInt(a.name.replace('Sprint ', ''));
                      const numB = parseInt(b.name.replace('Sprint ', ''));
                      return numB - numA; // Sort descending to get latest first
                    });

                  if (sprintOptions.length > 0) {
                    const currentSprint = sprintOptions[0];
                    await github.graphql(`
                      mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                        updateProjectV2ItemFieldValue(input: {
                          projectId: $projectId,
                          itemId: $itemId,
                          fieldId: $fieldId,
                          value: { singleSelectOptionId: $value }
                        }) {
                          projectV2Item {
                            id
                          }
                        }
                      }
                    `, {
                      projectId: project.id,
                      itemId: projectItem.id,
                      fieldId: sprintField.id,
                      value: currentSprint.id
                    });
                    console.log(`Set sprint to latest: '${currentSprint.name}'`);
                  }
                }
              }

              // Set Start Date to today
              if (startDateField) {
                const today = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD

                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Date!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { date: $value }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `, {
                  projectId: project.id,
                  itemId: projectItem.id,
                  fieldId: startDateField.id,
                  value: today
                });
                console.log(`Set start date to ${today}`);
              }

            } catch (error) {
              console.error("Error setting project fields:", error.message);
            }
        continue-on-error: true